# DebugAutoPatch IDA Plugin
# Patching improvement plugin for IDA v7.0+
#
# Additional support powered by Keystone Engine (http://www.keystone-engine.org).
# By Scott Mudge, 2019 -- https://scottmudge.com.
#
# NOTE: This has been tested with IDA 7.0 - I have made attempts at backward/forward compatibility,
# but please report bugs for other versions.
#
# DebugAutoPatch is released under the GNU GPLv3 license. See LICENSE for more information.
# Find information and latest version at https://github.com/scottmudge/DebugAutoPatch
#
# This IDA plugin automatically applies byte patches stored in the NON-debug IDA "Patched bytes" database
# to the debugged process at runtime. It does this at (by default) the entry-point of the application (or DLL).
# The process will then automatically resume with the patched bytes set in memory.
#
# Why? Making modifications to application/.rdata code can be tedious, IDA in particular. First the patches must be
# made with the clunky patching tools, and then the binary must be patched on-disk, followed by re-executing the
# application. Furthermore, patching the actual binary introduces a number of potential issues which could be
# mitigated by leaving it untouched. For instance, if the module or application performs hash checks to ensure it
# has not been modified.
#
# Developer Notes:
# --------------------
# Change Log:
#   * Just see the commit logs.
#

from threading import Thread, Lock, Event
from idaapi import PluginForm
import cPickle as pickle
import gzip
import logging
import idaapi
import os
import idc
import json
import sys
import base64
import cStringIO as StringIO
import datetime
import webbrowser
from collections import OrderedDict

# Qt Imports
from PyQt5 import QtCore, QtGui, QtWidgets, uic
# noinspection PyUnresolvedReferences
from PyQt5.QtWidgets import QMainWindow, QLabel, QGridLayout, QVBoxLayout, QWidget, QDialog, QPushButton, QHeaderView, \
    QMessageBox, QTableWidget, QTableWidgetItem
# noinspection PyUnresolvedReferences
from PyQt5.QtCore import QSize, QRect, pyqtSignal
# noinspection PyUnresolvedReferences
from PyQt5.QtGui import QIcon, QPixmap, QImage

# TEMPORARY!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
ENABLE_DEBUGGING = False
if ENABLE_DEBUGGING:
    import pydevd
    pydevd.settrace('localhost', port=12345, stdoutToServer=True, stderrToServer=True)
# /TEMPORARY!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#  ----------------------------------------- Globals -----------------------------------------
DAP_VERSION = "0.2"
DAP_NAME = "DebugAutoPatch"
DAP_CONFIG_FILE_PATH = os.path.join(idc.GetIdaDirectory(), 'cfg', 'DebugAutoPatch.cfg')
DAP_WEBSITE = "https://github.com/scottmudge/DebugAutoPatch"
DEBUG_MESSAGE_LEVEL = logging.INFO
DAP_INITIALIZED = False
DAP_INST = None  # type: DebugAutoPatchPlugin
DAP_DB_COOKIE = 0xDA9DB005
WINDOW_OPEN = False

DAP_UI_B64 = ""
DAP_ICON_B64 = ""
DAP_LOGO_B64 = ""
#  ---------------------------------------------------------------------------------------------


#  ----------------------------------------- Utilities -----------------------------------------
def dap_msg(string):
    print("[{}]: {}".format(DAP_NAME, string))


def dap_warn(string, details=None):
    if details:
        print("[{} | WARNING]: {}\n\t> Details: {}".format(DAP_NAME, string, details))
    else:
        print("[{} | WARNING]: {}".format(DAP_NAME, string))


def dap_err(string, details=None):
    if details:
        print("[{} | ERROR]: {}\n\t> Details: {}".format(DAP_NAME, string, details))
    else:
        print("[{} | ERROR]: {}".format(DAP_NAME, string))


def get_cur_timestamp():
    """Returns timestamp as string"""
    return datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')


def datetime_to_timestamp(dt):
    return dt.strftime('%Y-%m-%d %H:%M:%S')


def get_filename_without_ext(filename):
    """Returns filename without the extension"""
    return os.path.splitext(filename)[0]


def OpenDapWebsite():
    """Opens the DAP website."""
    try:
        webbrowser.open(DAP_WEBSITE)
    except:
        dap_warn("Could not open website.")


class KillableThread(Thread):
    """Wraps a killable thread that loops at a preset interval. Runs supplied
    target function.
    """
    def __del__(self):
        self.kill()

    def __init__(self, name, target, sleep_interval):
        """
        Args:
            name: Name of the thread, used for logging.
            target (function): Target function
            sleep_interval (float): Sleep interval seconds between loops.
        """
        super(KillableThread, self).__init__(group=None, target=target, name=name)
        self._trigger = Event()
        self._interval = sleep_interval
        self._target = target
        self._name = name
        self._kill = False
        self.setDaemon(True)

    def trigger(self):
        """Triggers loop, but does not kill it."""
        self._kill = False
        self._trigger.set()

    def run(self):
        """Runs the thread."""
        while True:
            try:
                self._target()
                # If no kill signal is set, sleep for the interval,
                # If kill signal comes in while sleeping, immediately
                #  wake up and handle
                is_triggerer = self._trigger.wait(timeout=self._interval)
                if is_triggerer:
                    if self._kill:
                        break
                    else:
                        self._trigger.clear()
            except(KeyboardInterrupt, SystemExit):
                self.kill()
                continue
        dap_msg("Thread killed! [name={}]".format(self._name))

    def kill(self):
        """Kills the thread."""
        dap_msg("Killing thread... [name={}]".format(self._name))
        self._kill = True
        self._trigger.set()
#  ---------------------------------------------------------------------------------------------


#  ------------------------------------- User Interface --------------------------------------
class DAPPluginForm(PluginForm):
    """Primary plugin form"""

    def __init__(self):
        super(DAPPluginForm, self).__init__()
        self.p = None
        self.adding_patch_group = False
        self.num = 0

    def OnCreate(self, form):
        """Invoked when form is created."""
        self.p = self.FormToPyQtWidget(form)
        self.PopulateForm()

    def PopulateForm(self):
        """Creates layout."""

        icon_bytes = QtCore.QByteArray.fromBase64(DAP_ICON_B64)
        logo_bytes = QtCore.QByteArray.fromBase64(DAP_LOGO_B64)
        image_icon = QImage()
        image_icon.loadFromData(icon_bytes, "PNG")
        pixmap_icon = QPixmap.fromImage(image_icon)
        self.p.setWindowIcon(QIcon(pixmap_icon))

        image_logo = QImage()
        image_logo.loadFromData(logo_bytes, "PNG")
        pixmap_logo = QPixmap.fromImage(image_logo)

        # Load UI descriptor from Base64-encoded file
        ui_decoded = base64.b64decode(DAP_UI_B64)
        ui_file = StringIO.StringIO(ui_decoded)
        uic.loadUi(ui_file, baseinstance=self.p)
        self.p.setWindowTitle(DAP_NAME)
        
        # Populate Injection Method ComboBox
        self.p.comboBox_InjectionMethod.addItem("Process Start")
        self.p.comboBox_InjectionMethod.addItem("Breakpoint")
        self.p.comboBox_InjectionMethod.activated.connect(self._InjectionMethodComboBox_Callback)
        self.p.checkBox_ResumeAfterInjection.stateChanged.connect(self._ResumeAfterInjectionCheckbox_Callback)
        self.p.lineEdit_Breakpoint.editingFinished.connect(self._BreakpointLineEdit_Callback)
        self.p.pushButton_VisitBreakpoint.clicked.connect(self._VisitBreakpointButton_Callback)

        # Set logo and version at bottom
        self.p.label_BottomLogo.setPixmap(pixmap_logo)
        self.p.label_Version.setText("Version {}".format(DAP_VERSION))

        # Patch group elements
        self.p.pushButton_AddGroup.clicked.connect(self._AddPatchGroupButton_Callback)
        self.p.pushButton_DeleteGroup.clicked.connect(self._DeletePatchGroupButton_Callback)
        self.p.comboBox_PatchGroup.activated.connect(self._PatchGroupComboBox_Callback)

        # Resume after injection checkbox. 0 = not checked, 2 = checked
        self.p.checkBox_ResumeAfterInjection.setCheckState(0)

        # Enable/disable patch group checkbox
        self.p.checkBox_PatchGroupEnabled.stateChanged.connect(self._PatchGroupEnabledCheckbox_Callback)

        # Setup Table Widget
        labels = ("Enabled", "Address", "Patched Bytes", "Original Bytes", "Description", "Last Modified")
        self.p.tableWidget_Patches.setHorizontalHeaderLabels(labels)
        self.p.tableWidget_Patches.setColumnWidth(0, 52)
        self.p.tableWidget_Patches.setColumnWidth(1, 125)
        self.p.tableWidget_Patches.setColumnWidth(2, 170)
        self.p.tableWidget_Patches.setColumnWidth(3, 170)
        self.p.tableWidget_Patches.setColumnWidth(4, 200)
        self.p.tableWidget_Patches.setColumnWidth(5, 150)
        self.p.tableWidget_Patches.horizontalHeader().setSectionResizeMode(QHeaderView.Fixed)  # Disable column resize
        self.p.tableWidget_Patches.setSortingEnabled(True)

        self._UpdateAllElements()

        # Note - use self.p.window() to get parent window
        self.p.window().setMinimumSize(self.p.width(), self.p.height())

        global WINDOW_OPEN
        WINDOW_OPEN = True

    def _AddRowToTable(self, item):
        """Adds a row to the table.
        :type item: PatchedBytes
        """
        table = self.p.tableWidget_Patches  # type: QTableWidget

        # insert empty row
        table.insertRow(table.rowCount())
        row_idx = table.rowCount() - 1

        patched_bytes_str = ""
        orig_bytes_str = ""

        table.setItem(row_idx, 0, QTableWidgetItem("{}".format(0 if item.enabled else 1)))  # Enabled
        table.setItem(row_idx, 1, QTableWidgetItem("0x%x" % item.addr))  # Address
        table.setItem(row_idx, 2, QTableWidgetItem(patched_bytes_str))  # Patched Bytes
        table.setItem(row_idx, 3, QTableWidgetItem(orig_bytes_str))  # Original Bytes
        table.setItem(row_idx, 4, QTableWidgetItem(str(item.description)))  # Description
        table.setItem(row_idx, 5, QTableWidgetItem(datetime_to_timestamp(item.last_modified)))  # Last Modified

    def _RefreshPatchTable(self):
        """Updates the table with data from the current patch group."""

        self.p.tableWidget_Patches.clearContents()  # clear all contents minus headers

        patches = DAP_INST.patch_db.get_cur_group().get_all_patches()
        for patch in patches:
            self._AddRowToTable(patch)

    @staticmethod
    def _VisitBreakpointButton_Callback():
        """Callback for visit breakpoint button."""
        idaapi.jumpto(DAP_INST.patch_db.get_cur_group().breakpoint_addr)

    def _UpdateAllElements(self):
        """Updates all of the UI elements on the left"""
        self._UpdatePatchInjection()
        self._UpdatePatchGroup()
        self._RefreshPatchTable()

    def _UpdatePatchInjection(self):
        """Updates patch injection view"""
        group = DAP_INST.patch_db.get_cur_group()
        method = group.injection_method
        resume_after = bool(group.resume_after_breakpoint)
        breakpoint = str("0x%x" % group.breakpoint_addr)

        self.p.comboBox_InjectionMethod.setCurrentIndex(int(method))

        if method == InjectionMethod.ProcessStart:
            self.p.checkBox_ResumeAfterInjection.hide()
            self.p.label_Breakpoint.hide()
            self.p.lineEdit_Breakpoint.hide()
            self.p.pushButton_VisitBreakpoint.hide()
        else:
            self.p.checkBox_ResumeAfterInjection.show()
            self.p.label_Breakpoint.show()
            self.p.lineEdit_Breakpoint.show()
            self.p.pushButton_VisitBreakpoint.show()
            self.p.checkBox_ResumeAfterInjection.setCheckState(2 if group.resume_after_breakpoint else 0)
            self.p.lineEdit_Breakpoint.setText(breakpoint)

    def _BreakpointLineEdit_Callback(self):
        """Callback for breakpoint line edit."""

        valid = True
        text = self.p.lineEdit_Breakpoint.text()
        text = text.replace('0x', '')
        addr = 0
        try:
            addr = int(text, 16) # Base 16
        except:
            valid = False

        if not valid:
            QMessageBox.critical(self.p.window(), "Invalid Breakpoint Address",
                                 "The breakpoint you provided contains invalid characters!", QMessageBox.Ok,
                                 QMessageBox.Ok)
            return

        # Check if before or after core address
        before_test = 0
        after_test = 0
        try:
            before_test = idaapi.prev_addr(int(addr))  # if BADADDR, then address is before available code addresses
            after_test = idaapi.next_addr(int(addr))  # if BADADDR, then address is after available code addresses
        except TypeError:  # If this happens, address is too big
            addr = sys.maxint
            after_test = idaapi.BADADDR

        if before_test == idaapi.BADADDR:
            addr = idaapi.next_addr(addr)
        elif after_test == idaapi.BADADDR:
            addr = idaapi.prev_addr(addr)

        # Check to make sure breakpoint is valid
        if addr == idaapi.BADADDR:
            QMessageBox.critical(self.p.window(), "Invalid Breakpoint Address",
                                 "The breakpoint you provided [0x%x] is invalid!" % addr, QMessageBox.Ok,
                                 QMessageBox.Ok)
            return

        self.p.lineEdit_Breakpoint.setText("0x%x" % addr)
        DAP_INST.patch_db.get_cur_group().breakpoint_addr = addr
        DAP_INST.save_database()

    @staticmethod
    def _ResumeAfterInjectionCheckbox_Callback(state):
        """Callback for resume after injection checkbox."""
        if state == 0:
            DAP_INST.patch_db.get_cur_group().resume_after_breakpoint = False
        elif state == 2:
            DAP_INST.patch_db.get_cur_group().resume_after_breakpoint = True
        else:
            dap_warn("Unexpected checkbox state for PatchGroupEnabled")

        DAP_INST.save_database()

    def _InjectionMethodComboBox_Callback(self, index):
        """Callback for injection method callback."""
        if index == 0:
            DAP_INST.patch_db.get_cur_group().injection_method = InjectionMethod.ProcessStart
        else:
            DAP_INST.patch_db.get_cur_group().injection_method = InjectionMethod.Breakpoint
        self._UpdatePatchInjection()

    def _PatchGroupComboBox_Callback(self, idx):
        """Callback for patch group combobox."""
        if self.adding_patch_group:
            return
        group_name = self.p.comboBox_PatchGroup.currentText()
        if len(group_name) > 1:
            DAP_INST.patch_db.set_cur_group(group_name)

        self._UpdateAllElements()

    def _AddPatchGroupButton_Callback(self):
        """Callback for add patch group button."""
        # If not adding patch group, then switch to that mode and update
        if not self.adding_patch_group:
            self.adding_patch_group = True
            self._UpdateAllElements()
        # Otherwise "OK" was pressed and we should add whatever is in the textbox
        else:
            group_name = self.p.lineEdit_AddGroup.text()
            if len(group_name) < 1:
                return
            DAP_INST.patch_db.add_group(group_name)
            DAP_INST.patch_db.set_cur_group(group_name)
            self.adding_patch_group = False
            self._UpdateAllElements()
            self.p.comboBox_PatchGroup.setCurrentText(group_name)
            DAP_INST.save_database()

    def _DeletePatchGroupButton_Callback(self):
        """Callback for delete patch group button."""
        # If adding patch group, button is "Cancel"
        if self.adding_patch_group:
            self.adding_patch_group = False
        else:
            name = self.p.comboBox_PatchGroup.currentText()
            if name == "Default":
                return
            response = QMessageBox.question(
                self.p.window(), "Delete Patch Group?", "Are you sure you would like to delete patch group: {}"
                    .format(name), QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if response == QMessageBox.Yes:
                DAP_INST.patch_db.delete_cur_group()
                self.adding_patch_group = False
                DAP_INST.save_database()
            else:
                return
        self._UpdateAllElements()

    @staticmethod
    def _PatchGroupEnabledCheckbox_Callback(state):
        """Callback for state change of PatchGroupEnabled checkbox. - 0 == unchecked, 2 = checked"""
        if state == 0:
            DAP_INST.patch_db.get_cur_group().enabled = False
        elif state == 2:
            DAP_INST.patch_db.get_cur_group().enabled = True
        else:
            dap_warn("Unexpected checkbox state for PatchGroupEnabled")

        DAP_INST.save_database()

    def _UpdatePatchGroup(self):
        """Updates the buttons and input for adding a patch group."""
        groups = DAP_INST.patch_db.get_all_group_names()
        self.p.comboBox_PatchGroup.clear()

        if len(groups) > 0:
            for group in groups:
                self.p.comboBox_PatchGroup.addItem(group)
            self.p.comboBox_PatchGroup.setCurrentText(DAP_INST.patch_db.cur_group)

        if self.adding_patch_group:
            self.p.lineEdit_AddGroup.show()
            self.p.pushButton_AddGroup.setText("OK")
            self.p.pushButton_DeleteGroup.setText("Cancel")
        else:
            self.p.lineEdit_AddGroup.hide()
            self.p.lineEdit_AddGroup.clear()
            self.p.pushButton_AddGroup.setText("Add")
            self.p.pushButton_DeleteGroup.setText("Delete")

        self.p.checkBox_PatchGroupEnabled.setCheckState(2 if DAP_INST.patch_db.get_cur_group().enabled else 0)

    def OnClose(self, form):
        global WINDOW_OPEN
        WINDOW_OPEN = False
        pass

    def Show(self, caption, options=0):
        options |= PluginForm.WOPN_MENU | PluginForm.WOPN_RESTORE | PluginForm.WOPN_PERSIST
        return idaapi.plgform_show(self.__clink__, self, caption, options)


class AboutWindow(QDialog):
    def __init__(self):
        self._show_thread = None
        QMainWindow.__init__(self)

        self.setMinimumSize(QSize(300, 150))
        self.setMaximumSize(QSize(300, 150))
        self.setWindowTitle("DebugAutoPatch - About")
        self.setWindowModality(QtCore.Qt.ApplicationModal)

        button = QPushButton("Close", self)
        button.clicked.connect(self.close)
        button.move(160 - (0.5 * button.width()), 150 - button.height())

        img_bytes = QtCore.QByteArray.fromBase64(DAP_ICON_B64)
        image = QImage()
        image.loadFromData(img_bytes, "PNG")
        pixmap = QPixmap.fromImage(image)
        label_img = QLabel(self)
        label_img.setPixmap(pixmap.scaled(64, 64, QtCore.Qt.KeepAspectRatio))
        label_img.move(10, 10)

        label_main = QLabel("DebugAutoPatch - Version {}".format(DAP_VERSION), self)
        label_main.move(84, 16)
        label_subtitle = QLabel("Patching improvement plugin for IDA", self)
        label_subtitle.move(90, 32)
        label_author = QLabel("Copyright (c) 2019 - Scott Mudge", self)
        label_author.move(84, 48)
        label_link = QLabel("https://github.com/scottmudge/DebugAutoPatch", self)
        label_link.move(14, 84)
        label_license = QLabel("Licensed under GPLv3", self)
        label_license.move(14, 100)

        self.setWindowIcon(QIcon(pixmap))

    def show(self):
        self.exec_()
# ---------------------------------------------------------------------------------------------


class DapCfg:
    def __init__(self):
        pass
    Enabled = "enabled"
    PrimaryPatchAddr = "primary_patch_addr"


class InjectionMethod:
    def __init__(self):
        pass
    ProcessStart = 0
    Breakpoint = 1

# Create menu handlers for IDA >= 700
try:
    # noinspection PyBroadException,PyMethodParameters
    class DapMenuContext(idaapi.action_handler_t):
        label = None

        @classmethod
        def get_name(self):
            return self.__name__

        @classmethod
        def get_label(self):
            return self.label

        @classmethod
        def register(self, plugin, label):
            self.plugin = plugin
            self.label = label
            instance = self()
            return idaapi.register_action(idaapi.action_desc_t(
                self.get_name(),  # Name. Acts as an ID. Must be unique.
                instance.get_label(),  # Label. That's what users see.
                instance  # Handler. Called when activated, and for updating
            ))

        @classmethod
        def unregister(self):
            """Unregister the action.
            After unregistering the class cannot be used.
            """
            idaapi.unregister_action(self.get_name())

        @classmethod
        def activate(self, ctx):
            # dummy method
            return 1

        @classmethod
        def update(self, ctx):
            try:
                if ctx.form_type == idaapi.BWN_DISASM:
                    return idaapi.AST_ENABLE_FOR_FORM
                else:
                    return idaapi.AST_DISABLE_FOR_FORM
            except:
                # Add exception for main menu on >= IDA 7.0
                return idaapi.AST_ENABLE_ALWAYS


    class DapMCEnable(DapMenuContext):
        def activate(self, ctx):
            self.plugin.enable_patching()
            return 1


    class DapMCDisable(DapMenuContext):
        def activate(self, ctx):
            self.plugin.disable_patching()
            return 1


    class DapMCCheckUpdate(DapMenuContext):
        def activate(self, ctx):
            self.plugin.check_update()
            return 1


    class DapMCAbout(DapMenuContext):
        def activate(self, ctx):
            self.plugin.about()
            return 1


    class DapMCApplyPatch(DapMenuContext):
        def activate(self, ctx):
            self.plugin.apply_patch_to_memory()
            return 1


    class DapMCApplyPatchesToProc(DapMenuContext):
        def activate(self, ctx):
            self.plugin.apply_patches_to_current_proc()
            return 1


    class DapMCNull(DapMenuContext):
        def activate(self, ctx):
            self.plugin.menu_null()
            return 1


    class DapMCNull2(DapMenuContext):
        def activate(self, ctx):
            self.plugin.menu_null()
            return 1
except:
    pass


class PatchedBytes:
    """Container for patched byte type."""
    def __init__(self, addr, orig, patched, enabled=True, description=""):
        """Addr is patch address, orig is list of original bytes, patched is list of patched bytes. Len must be same."""
        self.addr = addr
        if len(orig) != len(patched):
            dap_err("Error creating PatchedBytes object - len(orig) != len(patched).")
        self.orig = orig
        self.patched = patched
        self.last_modified = datetime.datetime.now()
        self.description = description
        self.enabled = enabled


class PatchGroup:
    """Container for patch group."""
    def __init__(self, name, enabled=True, breakpoint_addr=idaapi.BADADDR,
                 injection_method=InjectionMethod.ProcessStart):
        self.patches = {}
        self.name = name
        self.enabled = enabled
        if breakpoint_addr == idaapi.BADADDR:
            breakpoint_addr = idaapi.next_addr(0)
        self.breakpoint_addr = breakpoint_addr
        self.injection_method = injection_method
        self.resume_after_breakpoint = True
        self.date_added = datetime.datetime.now()

    def add_patch(self, addr, patched, orig, description="", enabled=True):
        """Adds a patch to group."""
        if addr not in self.patches:
            self.patches.update({addr: PatchedBytes(addr, orig, patched, enabled, description)})
        else:
            dap_err("Cannot add patch at address [0x%x] - patch already exists at this address!" % addr)

    def delete_patch(self, addr):
        """Deletes patch at address."""
        if addr in self.patches:
            del self.patches[addr]
        else:
            dap_err("Cannot delete patch at address [0x%x] - patch does not exist at this address!" % addr)

    def get_all_patches(self):
        """Returns all patches as a list."""
        return self.patches.values()

class GroupDatabase:
    """Container for group database. Contains cookie to ensure serialized data is fine and version checking."""
    def __init__(self):
        self.cookie = int(DAP_DB_COOKIE)
        self.groups = {}
        self.cur_group = "Default"
        self.add_group("Default", True)
        self.window_open = False

    def set_cur_group(self, name):
        """Sets the current patch group."""
        if len(name) < 1:
            return
        if name not in self.groups:
            dap_err("Cannot set current group to [{}] - does not exist in database!".format(name))
            return
        self.cur_group = name
        dap_msg("Current patch group set to [{}].".format(name))

    def get_cur_group(self):
        # type: () -> PatchGroup
        """Returns current group"""
        if self.cur_group not in self.groups:
            dap_err("Current group [{}] no longer in database, switching to default".format(self.cur_group))
            self.cur_group = "Default"
            if self.cur_group not in self.groups:
                dap_err("Default group does not exist in database! Adding...")
                self.add_group("Default")
        return self.groups[self.cur_group]

    def get_group(self, name):
        # type: (str) -> PatchGroup
        """Returns group by name."""
        if name not in self.groups:
            dap_warn("Requested group [{}] is not in group database.".format(name))
            return PatchGroup("INVALID")
        return self.groups[name]

    def add_group(self, name, enabled=True):
        """Adds group to database."""
        if len(name) < 1:
            dap_warn("Cannot add patch group - name is blank.")
            return
        if name in self.groups:
            dap_warn("Cannot add patch group [{}] -- already exists in database!".format(name))
            return
        self.groups.update({name: PatchGroup(name, enabled)})

    def delete_group(self, name):
        """Deletes group from database."""
        if name == "Default":
            dap_err("Cannot delete the default group!")
            return
        if len(name) < 1:
            return
        if name in self.groups:
            # switch back to default if cur_group is same as group being deleted
            if self.cur_group == name:
                self.cur_group = "Default"
            del self.groups[name]
        else:
            dap_warn("Requested group [{}] not found in group database. Cannot delete.".format(name))

    def delete_cur_group(self):
        """Deletes current group."""
        if self.cur_group == "Default":
            dap_err("Cannot delete the default group!")
            return
        self.delete_group(self.cur_group)

    def get_all_group_names(self, sort=True):
        """Returns all current group names and current index. Set sort to true to sort by date added."""
        if sort:
            return [k for k, v in sorted(self.groups.items(), key=lambda p: p[1].date_added)]
        return self.groups.keys()


class DebugAutoPatchPlugin(idaapi.plugin_t):
    """Primary plugin object."""
    # This keeps the plugin in memory, important for hooking callbacks
    flags = idaapi.PLUGIN_KEEP
    comment = "Plugin for automatic byte patch injection - no binary-file patching needed!"
    help = "See https://github.com/scottmudge/DebugAutoPatch/blob/master/readme.md"
    wanted_name = "DebugAutoPatch"
    wanted_hotkey = "Ctrl+Shift+P"

    class PatchVisitor(object):
        """Used for visiting patched bytes when debugger is not active. These patches are then stored in a buffer,
        and are applied when debugger activates."""
        def __init__(self):
            """Initialize vars."""
            self.patches = []

            self.last_addr = idaapi.BADADDR

            self.patch_start_addr = 0
            self.patched_bytes_buf = []
            self.orig_bytes_buf = []

        def __call__(self, ea, fpos, orig, patch_val, cnt=()):
            """Call function, used by visiting func."""
            try:
                if fpos == -1:
                    dap_msg("fpos invalid ({}) -- patch skipped".format(fpos))
                else:
                    # Check for same address
                    if self.last_addr == ea:
                        dap_warn("Same address encountered while visiting patches: {}".format(ea))
                        return 0

                    # If this is a non-contiguous patch
                    if abs(self.last_addr - ea) > 1:
                        self.consolidate()
                        self.patch_start_addr = ea

                    self.patched_bytes_buf.append(patch_val)
                    self.orig_bytes_buf.append(orig)

                    self.last_addr = ea
                return 0
            except:
                return

        def consolidate(self):
            """Consolidates buffers."""
            if len(self.patched_bytes_buf) > 0 and (len(self.patched_bytes_buf) == len(self.orig_bytes_buf)):
                self.patches.append(PatchedBytes(self.patch_start_addr, self.orig_bytes_buf, self.patched_bytes_buf))

            self.patched_bytes_buf = []
            self.orig_bytes_buf = []
            self.patch_start_addr = 0

    class DebugHook(idaapi.DBG_Hooks):
        """Primary debug hook. Used for patching by default at process launch, or at defined patch group breakpoints."""
        def __init__(self, *args):
            super(DebugAutoPatchPlugin.DebugHook, self).__init__(*args)
            self.steps = 0

        def dbg_process_start(self, pid, tid, ea, name, base, size):
            dap_msg("Process start hook snagged -- applying patches...")
            result = DAP_INST.apply_all_patches_to_current_proc()
            if result >= 0:
                dap_msg("Success!")

        # def dbg_process_exit(self, pid, tid, ea, code):
        #     dap_msg("Process exited pid=%d tid=%d ea=0x%x code=%d" % (pid, tid, ea, code))
        #
        # def dbg_library_unload(self, pid, tid, ea, info):
        #     # dap_msg("Library unloaded: pid=%d tid=%d ea=0x%x info=%s" % (pid, tid, ea, info))
        #     return 0
        #
        # def dbg_process_attach(self, pid, tid, ea, name, base, size):
        #     dap_msg("Process attach pid=%d tid=%d ea=0x%x name=%s base=%x size=%x" % (pid, tid, ea, name, base, size))
        #
        # def dbg_process_detach(self, pid, tid, ea):
        #     # dap_msg("Process detached, pid=%d tid=%d ea=0x%x" % (pid, tid, ea))
        #     return 0
        #
        # def dbg_library_load(self, pid, tid, ea, name, base, size):
        #     # dap_msg("Library loaded: pid=%d tid=%d name=%s base=%x" % (pid, tid, name, base))
        #     pass
        #
        # def dbg_bpt(self, tid, ea):
        #     # dap_msg("Break point at 0x%x pid=%d" % (ea, tid))
        #     # return values:
        #     #   -1 - to display a breakpoint warning dialog
        #     #        if the process is suspended.
        #     #    0 - to never display a breakpoint warning dialog.
        #     #    1 - to always display a breakpoint warning dialog.
        #     return 0
        #
        # def dbg_suspend_process(self):
        #     dap_msg("Process suspended")
        #
        # def dbg_exception(self, pid, tid, ea, exc_code, exc_can_cont, exc_ea, exc_info):
        #     # dap_msg("Exception: pid=%d tid=%d ea=0x%x exc_code=0x%x can_continue=%d exc_ea=0x%x exc_info=%s" % (
        #     #   pid, tid, ea, exc_code & idaapi.BADADDR, exc_can_cont, exc_ea, exc_info))
        #     # return values:
        #     #   -1 - to display an exception warning dialog
        #     #        if the process is suspended.
        #     #   0  - to never display an exception warning dialog.
        #     #   1  - to always display an exception warning dialog.
        #     return 0
        #
        # def dbg_trace(self, tid, ea):
        #     # dap_msg("Trace tid=%d ea=0x%x" % (tid, ea))
        #     # return values:
        #     #   1  - do not log this trace event;
        #     #   0  - log it
        #     return 0
        #
        # def dbg_step_into(self):
        #     self.steps += 1
        #     # dap_msg("Step into - steps = {}".format(self.steps))
        #     idaapi.step_into()
        #
        # def dbg_run_to(self, pid, tid=0, ea=0):
        #     # dap_msg("Runto: tid=%d" % tid)
        #     idaapi.continue_process()
        #
        # def dbg_step_over(self):
        #     self.steps += 1
        #     # dap_msg("Step over - steps = {}".format(self.steps))
        #     idaapi.step_over()
        #     # eip = idc.GetRegValue("EIP")
        #     # dap_msg("0x%x %s" % (eip, idc.GetDisasm(eip)))
        #     #
        #     # self.steps += 1
        #     # if self.steps >= 5:
        #     #     idaapi.request_exit_process()
        #     # else:
        #     #     idaapi.request_step_over()

    def __init__(self):
        self.cfg = None
        self.debug_hook = None
        self.patch_db = GroupDatabase()
        self.patch_db_lock = Lock()
        self.patched_bytes_db = []
        self.patched_bytes_db_lock = Lock()
        self.monitor_thread = None
        self.window_state_thread = None
        self.window_state_counter = 0
        self.cur_idb_path = ""
        self.patch_db_path = ""

    def initialize_default_db(self):
        """Initializes a default database."""
        self.patch_db_lock.acquire()
        try:
            self.patch_db = GroupDatabase()
        except Exception as e:
            dap_warn("Error initializing default patch group database.", str(e))
        except:
            dap_warn("Unknown error while initializing default patch group database.")
        finally:
            self.patch_db_lock.release()

    def save_database(self, print_notice=False):
        """Saves the patch database (.dap file) to disk."""
        if len(self.patch_db_path) < 3:
            return

        # Delete if it exists
        try:
            if os.path.exists(self.patch_db_path):
                os.remove(self.patch_db_path)
            # double check
            if os.path.exists(self.patch_db_path):
                raise IOError("file still exists")
        except:
            dap_err("Could not save patch database, could not delete existing file.")
            return

        # Acquire lock and dump
        self.patch_db_lock.acquire()
        try:
            with gzip.open(self.patch_db_path, 'wb') as db_file:
                pickle.dump(self.patch_db, db_file)
                if print_notice:
                    dap_msg("Saved patch database to: {}".format(self.patch_db_path))
        except Exception as e:
            dap_warn("Error saving patch database.", str(e))
        except:
            dap_warn("Unknown error while saving patch database.")
        finally:
            self.patch_db_lock.release()

    def load_database(self):
        """Loads the patch database (.dap file) from disk."""
        if len(self.patch_db_path) < 3:
            return

        if not os.path.exists(self.patch_db_path):
            dap_msg("No patch database file found. Starting fresh database.")
            return

        if not os.path.isfile(self.patch_db_path):
            dap_warn("Patch database path ({}) is not a file. Cannot load or save database.".format(self.patch_db_path))
            return

        failed = True

        # Acquire lock and load
        self.patch_db_lock.acquire()
        try:
            with gzip.open(self.patch_db_path, 'rb') as db_file:
                self.patch_db = pickle.load(db_file)
            if self.patch_db.cookie != int(DAP_DB_COOKIE):
                raise IOError("Invalid database cookie. File is corrupt or from an incompatible earlier version.")
            dap_msg("Loaded patch database from: {}".format(self.patch_db_path))
            failed = False
        except Exception as e:
            dap_warn("Error loading patch database.", str(e))
        except:
            dap_warn("Unknown error while loading patch database.")
        finally:
            self.patch_db_lock.release()

        # Initialize a new DB if loading failed.
        if failed:
            self.initialize_default_db()

    def init(self):
        """Initialization routine."""
        global DAP_INITIALIZED

        if idaapi.IDA_SDK_VERSION < 700:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage("DebugAutoPatch does NOT support versions of IDA earlier than 7.0!")
            error_dialog.exec_()
            return idaapi.PLUGIN_SKIP

        # Get IDB path and parse to establish DB path
        self.cur_idb_path = idc.get_idb_path()
        self.patch_db_path = get_filename_without_ext(self.cur_idb_path) + ".dap"

        # Initialize default database
        self.initialize_default_db()

        # Load database if it exists
        self.load_database()

        # register menu handlers
        try:
            DapMCNull.register(self, "_________________________")
            DapMCNull2.register(self, "_________________________")
            DapMCEnable.register(self, "Enable Auto-Patching")
            DapMCDisable.register(self, "Disable Auto-Patching")
            DapMCApplyPatch.register(self, "Apply Patch to Memory")
            DapMCApplyPatchesToProc.register(self, "Apply Patches to Current Process")
            DapMCCheckUpdate.register(self, "Check for DebugAutoPatch Update")
            DapMCAbout.register(self, "About DebugAutoPatch")
        except:
            pass

        self.cfg = None

        if not DAP_INITIALIZED:
            DAP_INITIALIZED = True

            # Add menu IDA >= 7.0
            idaapi.attach_action_to_menu("Edit/Patch program/Null Menu", DapMCNull.get_name(), idaapi.SETMENU_APP)
            idaapi.attach_action_to_menu("Edit/Patch program/Enable Auto-Patching", DapMCEnable.get_name(),
                                         idaapi.SETMENU_APP)
            idaapi.attach_action_to_menu("Edit/Patch program/Disable Auto-Patching", DapMCDisable.get_name(),
                                         idaapi.SETMENU_APP)
            idaapi.attach_action_to_menu("Edit/Patch program/Apply Patch to Memory", DapMCApplyPatch.get_name(),
                                         idaapi.SETMENU_APP)
            idaapi.attach_action_to_menu("Edit/Patch program/Apply Patches to Current Process",
                                         DapMCApplyPatchesToProc.get_name(), idaapi.SETMENU_APP)
            idaapi.attach_action_to_menu("Edit/Patch program/Null Menu 2", DapMCNull2.get_name(),
                                         idaapi.SETMENU_APP)
            idaapi.attach_action_to_menu("Edit/Patch program/Check for DebugAutoPatch Update",
                                         DapMCCheckUpdate.get_name(), idaapi.SETMENU_APP)
            idaapi.attach_action_to_menu("Edit/Patch program/About DebugAutoPatch",
                                         DapMCAbout.get_name(), idaapi.SETMENU_APP)

            print("=" * 80)
            print("DebugAutoPatch v{0} Copyright (c) Scott Mudge 2019".format(DAP_VERSION))
            print("DebugAutoPatch is available from menu \"Edit > Patch program\"")
            print("Find more information about DebugAutoPatch at the project github repository")

            self.load_configuration()
            self.set_debug_hooks()

            # Update patch database first
            self.patch_monitor_func()

            # Save database (if default)
            self.save_database()

            dap_msg("Starting patch monitoring thread...")
            self.monitor_thread = KillableThread(name="PatchMonitoring", target=self.patch_monitor_func,
                                                 sleep_interval=0.7)
            self.monitor_thread.start()

            self.window_state_thread = KillableThread(name="WindowState", target=self.window_state_checker,
                                                      sleep_interval=0.3)
            self.window_state_thread.start()

            print("=" * 80)

            if self.patch_db.window_open:
                self.run()

        return idaapi.PLUGIN_KEEP

    def patch_monitor_func(self):
        """Monitors patches and caches patch DB, since IDA has separate DBs for debugged processes and non-debugged
        processes."""
        # Don't collect patches if debugger is on
        try:
            if idaapi.is_debugger_on() or idaapi.is_debugger_busy():
                return

            if not self.patched_bytes_db_lock.acquire(False):
                return
            else:
                try:
                    was_empty = False
                    if len(self.patched_bytes_db) < 1:
                        was_empty = True
                    patches = self.visit_patched_bytes()
                    self.patched_bytes_db = patches
                    if len(patches) > 0 and was_empty:
                        dap_msg("Byte patch buffer populated!")
                finally:
                    self.patched_bytes_db_lock.release()
        except:
            pass

    def enable_patching(self):
        """Enables automatic patching."""
        self.cfg[DapCfg.Enabled] = True
        dap_msg("Automatic patching enabled.")
        pass

    def disable_patching(self):
        """Disables automatic patching."""
        self.cfg[DapCfg.Enabled] = False
        dap_msg("Automatic patching disabled.")
        pass

    def apply_patch_to_memory(self):
        """Adds a new patch to database."""
        pass

    def apply_named_patch_group_to_current_proc(self, patch_group_name):
        """Applies a named patch group to current process."""
        pass

    def apply_patch_group_to_current_proc(self, patch_group):
        """Applies supplied patch group to current process."""
        pass

    def apply_all_patches_to_current_proc(self):
        """Applies ALL patches to current process."""
        if not self.cfg[DapCfg.Enabled]:
            dap_msg("Not applying patches to current process - patching currently disabled.")
            return

        total_applied = 0
        total_bytes_patched = 0
        if idaapi.suspend_process():
            self.patched_bytes_db_lock.acquire()
            try:
                if len(self.patched_bytes_db) < 1:
                    dap_msg("No patched bytes currently in database, nothing to do!")
                else:
                    for patch in self.patched_bytes_db:
                        if not patch.enabled:
                            continue
                        total_applied += 1
                        total_bytes_patched += self.apply_byte_patch(patch)
                    dap_msg("[{}] total patches applied / [{}] total bytes modified!"
                            .format(total_applied, total_bytes_patched))
            except Exception as e:
                dap_err("Error encountered while applying patches to current debugged process.", str(e))
            except:
                dap_err("Unknown error encountered while applying patches to current debugged process.")
            finally:
                self.patched_bytes_db_lock.release()
        else:
            dap_err("Could not apply patches, could not suspend process!")
        idc.resume_process()
        return total_applied

    @staticmethod
    def about():
        """About window."""
        window = AboutWindow()
        window.show()
        pass

    @staticmethod
    def show_plugin_form():
        """Shows primary plugin form."""
        plg = DAPPluginForm()
        plg.Show("{}".format(DAP_NAME))

    def check_update(self):
        """Checks for new version."""
        # TODO - Update
        pass

    def menu_null(self):
        """For menu item which does nothing."""
        pass

    def run(self, *args):
        """Used for when user selects plugin entry from Edit > Plugins"""
        # self.about()
        self.show_plugin_form()
        pass

    def term(self):
        """Termination call."""
        self.save_database(True)
        self.monitor_thread.kill()
        self.window_state_thread.kill()
        self.unset_debug_hooks()
        self.save_configuration()

    def set_debug_hooks(self):
        """Installs debugger hooks for automatic patching."""
        self.unset_debug_hooks()
        dap_msg("Installing debug hooks...")
        self.debug_hook = DebugAutoPatchPlugin.DebugHook()
        self.debug_hook.hook()
        self.debug_hook.steps = 0
        dap_msg("Done!")

    def unset_debug_hooks(self):
        """Remove any installed debug hooks."""
        try:
            if self.debug_hook:
                dap_msg("Removing previously installed debugger hooks...")
                self.debug_hook.unhook()
                dap_msg("Done!")
        except:
            pass

    @staticmethod
    def apply_byte_patch(patched_byte_ojb):
        """Applies a byte patch to current debugger memory."""
        # check if debugger is even running
        if not idaapi.is_debugger_on():
            dap_warn("Cannot apply patch - debugger is not currently on!")
            return 0

        num_orig = len(patched_byte_ojb.orig)
        num_patched = len(patched_byte_ojb.patched)
        start_addr = patched_byte_ojb.addr

        total_applied = 0

        if num_orig != num_patched:
            dap_err("Cannot apply patch, length of orig bytes [{}] != length of patched bytes [{}]!"
                    .format(num_orig, num_patched))
            return 0

        for i in range(0, num_patched):
            addr = start_addr + i
            byte = patched_byte_ojb.patched[i]

            try:
                # patched byte in debugger memory
                total_applied += idc.PatchDbgByte(addr, byte)
            except Exception as e:
                dap_err("Error encountered while applying byte patch to memory!", str(e))
            except:
                dap_err("Unknown error encountered while applying byte patch to memory!")

        if total_applied > 0:
            idaapi.invalidate_dbgmem_contents(start_addr, total_applied)  # addr, size

        return total_applied

    def visit_patched_bytes(self):
        """Iterates through patched bytes and stores them in a buffer."""
        try:
            visitor = self.PatchVisitor()
            result = idaapi.visit_patched_bytes(0, idaapi.BADADDR, visitor)
            if result != 0:
                dap_err("visit_patched_bytes() returned unexpected result", "error code ({})".format(result))
                return []
            visitor.consolidate()
            return visitor.patches
        except Exception as e:
            dap_err("Exception encountered while visiting patched bytes", str(e))
        except:
            dap_err("Unknown")

    def window_state_checker(self):
        """This runs on a thread to check if the window is open or closed. This sets a state flag in the DB to let
        IDA know whether or not to re-open the window. Attempted to use OnClose() in the GUI class initially, but
        there was no way to tell if the event was from the user closing the window, or the application simply
        closing."""
        try:
            if self.patch_db.window_open != WINDOW_OPEN:
                if self.window_state_counter > 1:
                    self.patch_db.window_open = WINDOW_OPEN
                self.window_state_counter += 1
            else:
                self.window_state_counter = 0
        except:
            pass

    def load_configuration(self):
        """Loads configuration from disk."""
        self.cfg = {}
        save_cfg = False
        # load configuration from file
        try:
            f = open(DAP_CONFIG_FILE_PATH, "rt")
            self.cfg = json.load(f)
            f.close()
        except IOError:
            dap_msg("Failed to load config file -- using defaults.")
            save_cfg = True
        except Exception as e:
            dap_err("Failed to load config file.", str(e))

        # Enables or disables patching at debug time
        if DapCfg.Enabled not in self.cfg:
            self.cfg[DapCfg.Enabled] = True
        # Primary patched application address - set to BADADDR = use application start
        if DapCfg.PrimaryPatchAddr not in self.cfg:
            self.cfg[DapCfg.PrimaryPatchAddr] = idaapi.BADADDR
        if save_cfg:
            self.save_configuration()

    def save_configuration(self):
        """Saves configuration to disk."""
        if self.cfg:
            try:
                json.dump(self.cfg, open(DAP_CONFIG_FILE_PATH, "wt"))
            except Exception as e:
                dap_err("Failed to save configuration file", str(e))
            else:
                dap_msg("Saved configuration to: {}".format(DAP_CONFIG_FILE_PATH))


def PLUGIN_ENTRY():
    global DAP_INST
    logging.basicConfig(format='[%(levelname)s] %(message)s\t(%(module)s:%(funcName)s)')
    logging.root.setLevel(logging.DEBUG)
    DAP_INST = DebugAutoPatchPlugin()
    return DAP_INST
